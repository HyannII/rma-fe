generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id                Int                @id @default(autoincrement())
  name              String
  address           String
  contactInfo       String
  inventoryReceipts InventoryReceipt[]
}

model InventoryReceipt {
  id          Int      @id @default(autoincrement())
  providerId  Int
  goodsId     Int
  quantity    Int
  importPrice Float
  provider    Provider @relation(fields: [providerId], references: [id])
  goods       Goods    @relation(fields: [goodsId], references: [id])
}

model Goods {
  id                 Int                @id @default(autoincrement())
  quantity           Int
  name               String
  type               String
  averageImportPrice Float
  weight             Float
  unit               String
  sellingPrice       Float
  inventoryReceipts  InventoryReceipt[]
  ingredients        Ingredient[]
}

model Dish {
  id           Int           @id @default(autoincrement())
  name         String
  unit         Float
  price        Float
  type         String
  orderDetails OrderDetail[]
  ingredients  Ingredient[]
}

model Ingredient {
  id      Int   @id @default(autoincrement())
  dishId  Int
  goodsId Int
  dish    Dish  @relation(fields: [dishId], references: [id])
  goods   Goods @relation(fields: [goodsId], references: [id])
}

model Order {
  id           Int           @id @default(autoincrement())
  status       String
  orderDetails OrderDetail[]
  tableOrders  TableOrder[]
  receipts     Receipt[]
}

model OrderDetail {
  id      Int     @id @default(autoincrement())
  dishId  Int
  orderId Int
  note    String?
  dish    Dish    @relation(fields: [dishId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Table {
  id            Int           @id @default(autoincrement())
  tableNo       Int
  numberOfSeats Int
  place         String
  status        String
  tableOrders   TableOrder[]
  reservations  Reservation[]
}

model TableOrder {
  id      Int   @id @default(autoincrement())
  tableId Int
  orderId Int
  table   Table @relation(fields: [tableId], references: [id])
  order   Order @relation(fields: [orderId], references: [id])
}

model Reservation {
  id              Int       @id @default(autoincrement())
  tableId         Int
  reservationTime DateTime
  name            String
  phoneNumber     String
  table           Table     @relation(fields: [tableId], references: [id])
  Receipt         Receipt[]
}

model Receipt {
  id            Int         @id @default(autoincrement())
  totalPrice    Float
  payBy         String
  timePaid      DateTime
  reservationId Int
  staffId       Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  staff         Staff       @relation(fields: [staffId], references: [id])
  order         Order?      @relation(fields: [orderId], references: [id])
  orderId       Int?
}

model Staff {
  id            Int          @id @default(autoincrement())
  age           Int
  name          String
  phoneNumber   String
  cid           String
  wagesPerShift Float
  role          String
  staffShifts   StaffShift[]
  receipts      Receipt[]
}

model StaffShift {
  id        Int      @id @default(autoincrement())
  staffId   Int
  shiftId   Int
  dayOfWeek DateTime
  isChecked Boolean
  staffs    Staff    @relation(fields: [staffId], references: [id])
  shift     Shift    @relation(fields: [shiftId], references: [id])
}

model Shift {
  id          Int          @id @default(autoincrement())
  shiftName   String
  startAt     DateTime
  endAt       DateTime
  staffShifts StaffShift[]
}
